digraph "ReplayParserModule"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{ReplayParserModule\n|+ model\l+ model1\l+ ReplayAlreadySeen\l+ p1\l+ p2\l|+ onStart()\l+ onEnd()\l+ onFrame()\l+ onSendText()\l+ onReceiveText()\l+ onPlayerLeft()\l+ onNukeDetect()\l+ onUnitDiscover()\l+ onUnitEvade()\l+ onUnitShow()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{BWAPI::AIModule\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +GSHandler\n+GSHandler1" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{CGameStateHandler\n|+ currentPlayer\l+ opponentPlayer\l+ mapName\l- timerQueue\l- iterator\l- currentGameState\l- inputGameState\l- outputGameState\l- prevTime\l- predictionTime\l|+ CGameStateHandler()\l+ getNextTime()\l+ getIterator()\l+ popQueue()\l+ addNewGameState()\l+ saveBothIOGameStates()\l+ addUnitOutputGameState()\l+ updateCurrentGameState()\l+ setPlayer()\l+ setPredictionTime()\l+ getInputGameStateVector()\l+ getOutputGameStateVector()\l- addTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCGameStateHandler.html",tooltip="Class handles game states during the game and saves them. For every saved game state, it saves another one with 3 minute delay. To the second game state, there are new units added that were created by the player. Game state is represented by a map. Key value is a BWAPI::UnitType (Marine, Zergling, Probe...) and the value is how many units of this given type player has. "];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +file\n+file1" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{CWriteToFileHandler\n|- FileCode\l- jObject\l|+ CWriteToFileHandler()\l+ PrintGameState()\l+ Init()\l+ Finish()\l+ loadIterator()\l+ saveIterator()\l+ WriteIntoFile()\l+ LoadFile()\l- OpenFile()\l- CloseFile()\l- ErrorMess()\l- additionalDataToBeAdded()\l- addData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCWriteToFileHandler.html",tooltip="Handler used for output operations. We want to save harvested data into some file. All data are saved in json format using json object from external library: https://github.com/nlohmann/json. "];
}
